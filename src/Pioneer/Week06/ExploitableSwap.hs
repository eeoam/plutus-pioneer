{-# LANGUAGE NoImplicitPrelude #-}

module Pioneer.Week06.ExploitableSwap where

import Pioneer.Plutus
import Pioneer.Util

data DatumSwap = DatumSwap
    { beneficiary :: PubKeyHash
    , price       :: Integer}
unstableMakeIsData ''DatumSwap

{-# INLINABLE script #-}
script :: DatumSwap -> () -> ScriptContext -> Bool
script ds _ ctx =
    traceIfFalse "Hey! You have to pay the owner!" outputToBeneficiary where

    txInfo :: TxInfo
    txInfo = scriptContextTxInfo ctx

    outputToBeneficiary :: Bool
    outputToBeneficiary = 
        valuePaidTo txInfo (beneficiary ds) == singleton adaSymbol adaToken (price ds)

{-# INLINABLE scripu #-}
scripu :: BuiltinData -> BuiltinData -> BuiltinData -> ()
scripu = mkUntypedValidatorScript script

scripc :: CompiledCode (BuiltinData -> BuiltinData -> BuiltinData -> ())
scripc = $$(compile [|| scripu ||])

validator :: Validator
validator = mkValidatorScript scripc

